// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package counter

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetCounterGasCost       uint64 = 1 /* SET A GAS COST HERE */
	IncrementCounterGasCost uint64 = 1 /* SET A GAS COST HERE */
	SetCounterGasCost       uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// CounterRawABI contains the raw ABI of Counter contract.
	//go:embed contract.abi
	CounterRawABI string

	CounterABI = contract.ParseABI(CounterRawABI)

	CounterPrecompile = createCounterPrecompile()

	storageKeyHash = common.BytesToHash([]byte("counterValue"))
)

// StoreCounterValue sets the value of the storage key in the contract storage.
func StoreCounterValue(stateDB contract.StateDB, value *big.Int) {
	// Convert uint to Hash
	valueHash := common.BigToHash(value)

	stateDB.SetState(ContractAddress, storageKeyHash, valueHash)
}

// GetCounterValue gets the value of the storage key in the contract storage.
func GetCounterValue(stateDB contract.StateDB) *big.Int {
	// Get the value
	value := stateDB.GetState(ContractAddress, storageKeyHash)

	// Convert bytes to uint
	return value.Big()
}

// PackGetCounter packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetCounter() ([]byte, error) {
	return CounterABI.Pack("getCounter")
}

// PackGetCounterOutput attempts to pack given value of type *big.Int
// to conform the ABI outputs.
func PackGetCounterOutput(value *big.Int) ([]byte, error) {
	return CounterABI.PackOutput("getCounter", value)
}

// UnpackGetCounterOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetCounterOutput(output []byte) (*big.Int, error) {
	res, err := CounterABI.Unpack("getCounter", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func getCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetCounterGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// Get the current state
	currentState := accessibleState.GetStateDB()
	// Get the value set at recipient
	value := GetCounterValue(currentState)

	packedOutput, err := PackGetCounterOutput(value)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// PackIncrementCounter packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackIncrementCounter() ([]byte, error) {
	return CounterABI.Pack("incrementCounter")
}

func incrementCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, IncrementCounterGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE
	// Get the current state
	currentState := accessibleState.GetStateDB()

	// Get the value of the counter
	value := GetCounterValue(currentState)

	// Set the value
	StoreCounterValue(currentState, value.Add(value, big.NewInt(1)))

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSetCounterInput attempts to unpack [input] into the *big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSetCounterInput(input []byte) (*big.Int, error) {
	res, err := CounterABI.UnpackInput("setCounter", input)
	if err != nil {
		return big.NewInt(0), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

// PackSetCounter packs [value] of type *big.Int into the appropriate arguments for setCounter.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSetCounter(value *big.Int) ([]byte, error) {
	return CounterABI.Pack("setCounter", value)
}

func setCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SetCounterGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SetCounterInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSetCounterInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE

	// Get the current state
	currentState := accessibleState.GetStateDB()

	// Set the value
	StoreCounterValue(currentState, inputStruct)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createCounterPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createCounterPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getCounter":       getCounter,
		"incrementCounter": incrementCounter,
		"setCounter":       setCounter,
	}

	for name, function := range abiFunctionMap {
		method, ok := CounterABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}

// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package mapping

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetMapAddUintGasCost uint64 = 1 /* SET A GAS COST HERE */
	MapAddUintGasCost    uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// MappingRawABI contains the raw ABI of Mapping contract.
	//go:embed contract.abi
	MappingRawABI string

	MappingABI = contract.ParseABI(MappingRawABI)

	MappingPrecompile = createMappingPrecompile()
)

type GetMapAddUintInput struct {
	Key     string
	Address common.Address
}

type MapAddUintInput struct {
	Key     string
	Address common.Address
	Balance *big.Int
}

//@todo custom functions start
func getStorageKeyHash(key string, address common.Address) common.Hash{


	stringAddress := address.String()
	stringConc := key + stringAddress

	return common.BytesToHash([]byte(stringConc))
	
}
// StoreMapValue sets the value of the storage key in the contract storage.
func StoreMapValue(stateDB contract.StateDB, storageKeyHash common.Hash,value *big.Int) {
	// Convert uint to Hash
	valueHash := common.BigToHash(value)
	stateDB.SetState(ContractAddress, storageKeyHash, valueHash)
}
func helperGetMapAddUint(stateDB contract.StateDB, storageKeyHash common.Hash) *big.Int{
	value := stateDB.GetState(ContractAddress, storageKeyHash)
	return value.Big()
}
//@todo custom functions end

// UnpackGetMapAddUintInput attempts to unpack [input] as GetMapAddUintInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetMapAddUintInput(input []byte) (GetMapAddUintInput, error) {
	inputStruct := GetMapAddUintInput{}
	err := MappingABI.UnpackInputIntoInterface(&inputStruct, "getMapAddUint", input)

	return inputStruct, err
}

// PackGetMapAddUint packs [inputStruct] of type GetMapAddUintInput into the appropriate arguments for getMapAddUint.
func PackGetMapAddUint(inputStruct GetMapAddUintInput) ([]byte, error) {
	return MappingABI.Pack("getMapAddUint", inputStruct.Key, inputStruct.Address)
}

// PackGetMapAddUintOutput attempts to pack given balance of type *big.Int
// to conform the ABI outputs.
func PackGetMapAddUintOutput(balance *big.Int) ([]byte, error) {
	return MappingABI.PackOutput("getMapAddUint", balance)
}

// UnpackGetMapAddUintOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetMapAddUintOutput(output []byte) (*big.Int, error) {
	res, err := MappingABI.Unpack("getMapAddUint", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func getMapAddUint(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetMapAddUintGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetMapAddUintInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetMapAddUintInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	storageKeyHash := getStorageKeyHash(inputStruct.Key, inputStruct.Address)
	// var output *big.Int // CUSTOM CODE FOR AN OUTPUT
	currentState := accessibleState.GetStateDB()
	output := helperGetMapAddUint(currentState, storageKeyHash)

	packedOutput, err := PackGetMapAddUintOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackMapAddUintInput attempts to unpack [input] as MapAddUintInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackMapAddUintInput(input []byte) (MapAddUintInput, error) {
	inputStruct := MapAddUintInput{}
	err := MappingABI.UnpackInputIntoInterface(&inputStruct, "mapAddUint", input)

	return inputStruct, err
}

// PackMapAddUint packs [inputStruct] of type MapAddUintInput into the appropriate arguments for mapAddUint.
func PackMapAddUint(inputStruct MapAddUintInput) ([]byte, error) {
	return MappingABI.Pack("mapAddUint", inputStruct.Key, inputStruct.Address, inputStruct.Balance)
}

func mapAddUint(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, MapAddUintGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the MapAddUintInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackMapAddUintInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	storageKeyHash := getStorageKeyHash(inputStruct.Key, inputStruct.Address)
	currentState := accessibleState.GetStateDB()
	StoreMapValue(currentState,storageKeyHash,inputStruct.Balance)
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createMappingPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createMappingPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getMapAddUint": getMapAddUint,
		"mapAddUint":    mapAddUint,
	}

	for name, function := range abiFunctionMap {
		method, ok := MappingABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}

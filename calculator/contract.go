// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package calculator

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	AddGasCost     uint64 = 1 /* SET A GAS COST HERE */
	NextTwoGasCost uint64 = 1 /* SET A GAS COST HERE */
	RepeatGasCost  uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// CalculatorRawABI contains the raw ABI of Calculator contract.
	//go:embed contract.abi
	CalculatorRawABI string

	CalculatorABI = contract.ParseABI(CalculatorRawABI)

	CalculatorPrecompile = createCalculatorPrecompile()
)

type AddInput struct {
	Value1 *big.Int
	Value2 *big.Int
}

type NextTwoOutput struct {
	Result1 *big.Int
	Result2 *big.Int
}

type RepeatInput struct {
	Times *big.Int
	Text  string
}

// UnpackAddInput attempts to unpack [input] as AddInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackAddInput(input []byte) (AddInput, error) {
	inputStruct := AddInput{}
	err := CalculatorABI.UnpackInputIntoInterface(&inputStruct, "add", input)

	return inputStruct, err
}

// PackAdd packs [inputStruct] of type AddInput into the appropriate arguments for add.
func PackAdd(inputStruct AddInput) ([]byte, error) {
	return CalculatorABI.Pack("add", inputStruct.Value1, inputStruct.Value2)
}

// PackAddOutput attempts to pack given result of type *big.Int
// to conform the ABI outputs.
func PackAddOutput(result *big.Int) ([]byte, error) {
	return CalculatorABI.PackOutput("add", result)
}

// UnpackAddOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackAddOutput(output []byte) (*big.Int, error) {
	res, err := CalculatorABI.Unpack("add", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func add(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, AddGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the AddInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackAddInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	//_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output *big.Int // CUSTOM CODE FOR AN OUTPUT
	output = new(big.Int).Add(inputStruct.Value1, inputStruct.Value2)

	packedOutput, err := PackAddOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackNextTwoInput attempts to unpack [input] into the *big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackNextTwoInput(input []byte) (*big.Int, error) {
	res, err := CalculatorABI.UnpackInput("nextTwo", input)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

// PackNextTwo packs [value1] of type *big.Int into the appropriate arguments for nextTwo.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackNextTwo(value1 *big.Int) ([]byte, error) {
	return CalculatorABI.Pack("nextTwo", value1)
}

// PackNextTwoOutput attempts to pack given [outputStruct] of type NextTwoOutput
// to conform the ABI outputs.
func PackNextTwoOutput(outputStruct NextTwoOutput) ([]byte, error) {
	return CalculatorABI.PackOutput("nextTwo",
		outputStruct.Result1,
		outputStruct.Result2,
	)
}

// UnpackNextTwoOutput attempts to unpack [output] as NextTwoOutput
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackNextTwoOutput(output []byte) (NextTwoOutput, error) {
	outputStruct := NextTwoOutput{}
	err := CalculatorABI.UnpackIntoInterface(&outputStruct, "nextTwo", output)

	return outputStruct, err
}

func nextTwo(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, NextTwoGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the NextTwoInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackNextTwoInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	//_ = inputStruct          // CUSTOM CODE OPERATES ON INPUT
	var output NextTwoOutput // CUSTOM CODE FOR AN OUTPUT
	output.Result1 = new(big.Int).Add(inputStruct, big.NewInt(1))
	output.Result2 = new(big.Int).Add(inputStruct, big.NewInt(2))

	packedOutput, err := PackNextTwoOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackRepeatInput attempts to unpack [input] as RepeatInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackRepeatInput(input []byte) (RepeatInput, error) {
	inputStruct := RepeatInput{}
	err := CalculatorABI.UnpackInputIntoInterface(&inputStruct, "repeat", input)

	return inputStruct, err
}

// PackRepeat packs [inputStruct] of type RepeatInput into the appropriate arguments for repeat.
func PackRepeat(inputStruct RepeatInput) ([]byte, error) {
	return CalculatorABI.Pack("repeat", inputStruct.Times, inputStruct.Text)
}

// PackRepeatOutput attempts to pack given result of type string
// to conform the ABI outputs.
func PackRepeatOutput(result string) ([]byte, error) {
	return CalculatorABI.PackOutput("repeat", result)
}

// UnpackRepeatOutput attempts to unpack given [output] into the string type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackRepeatOutput(output []byte) (string, error) {
	res, err := CalculatorABI.Unpack("repeat", output)
	if err != nil {
		return "", err
	}
	unpacked := *abi.ConvertType(res[0], new(string)).(*string)
	return unpacked, nil
}

func repeat(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, RepeatGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the RepeatInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackRepeatInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	//_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output string // CUSTOM CODE FOR AN OUTPUT
	output = strings.Repeat(inputStruct.Text, int(inputStruct.Times.Int64()))

	packedOutput, err := PackRepeatOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createCalculatorPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createCalculatorPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"add":     add,
		"nextTwo": nextTwo,
		"repeat":  repeat,
	}

	for name, function := range abiFunctionMap {
		method, ok := CalculatorABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}

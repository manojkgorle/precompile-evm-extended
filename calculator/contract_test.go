// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package calculator

import (
	"crypto/rand"
	"math/big"
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

var (
	_ = vmerrs.ErrOutOfGas
	_ = big.NewInt
	_ = common.Big0
	_ = require.New
)

// These tests are run against the precompile contract directly with
// the given input and expected output. They're just a guide to
// help you write your own tests. These tests are for general cases like
// allowlist, readOnly behaviour, and gas cost. You should write your own
// tests for specific cases.
var (
	expectedNextTwoOutcome, _ = PackNextTwoOutput(NextTwoOutput{big.NewInt(2), big.NewInt(3)})
	expectedRepeatOutcome, _  = PackRepeatOutput("EGSEGS")
	expectedAddOutcome        = common.LeftPadBytes(big.NewInt(3).Bytes(), common.HashLength)

	tests = map[string]testutils.PrecompileTest{
		"insufficient gas for add should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := AddInput{big.NewInt(1), big.NewInt(1)}
				input, err := PackAdd(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: AddGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for nextTwo should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput *big.Int
				testInput = new(big.Int)
				input, err := PackNextTwo(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: NextTwoGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"insufficient gas for repeat should fail": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				// CUSTOM CODE STARTS HERE
				// populate test input here
				testInput := RepeatInput{big.NewInt(1), "EGS"}
				input, err := PackRepeat(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: RepeatGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"testing add": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				value1 := big.NewInt(1)
				value2 := big.NewInt(2)
				testInput := AddInput{value1, value2}
				input, err := PackAdd(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: AddGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedAddOutcome,
		},
		"testing nextTwo": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				testInput := big.NewInt(1)
				input, err := PackNextTwo(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: NextTwoGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedNextTwoOutcome,
		},
		"testing repeat": {
			Caller: common.Address{1},
			InputFn: func(t testing.TB) []byte {
				baseString := "EGS"
				timesToRepeat := big.NewInt(2)
				input, err := PackRepeat(RepeatInput{timesToRepeat, baseString})
				require.NoError(t, err)
				return input
			},
			SuppliedGas: RepeatGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedRepeatOutcome,
		},
	}
)

// TestCalculatorRun tests the Run function of the precompile contract.
func TestCalculatorRun(t *testing.T) {
	// Run tests.
	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			test.Run(t, Module, state.NewTestStateDB(t))
		})
	}
	// Defining own test cases here
	N := 1_000
	n := new(big.Int).Exp(big.NewInt(2), big.NewInt(int64(128)), nil)

	// Fuzzing N times
	for i := 0; i < N; i++ {
		// Adding randomization test here
		randomInt1, err := rand.Int(rand.Reader, n)
		randomInt2, err := rand.Int(rand.Reader, n)
		// Expected outcome
		expectedRandOutcome := common.LeftPadBytes(big.NewInt(0).Add(randomInt1, randomInt2).Bytes(), common.HashLength)

		// Pack add input
		randTestInput := AddInput{randomInt1, randomInt2}
		randInput, err := PackAdd(randTestInput)
		require.NoError(t, err)

		randTest := testutils.PrecompileTest{
			Caller:      common.Address{1},
			Input:       randInput,
			SuppliedGas: AddGasCost,
			ReadOnly:    true,
			ExpectedRes: expectedRandOutcome,
		}

		t.Run("Testing random sum!", func(t *testing.T) {
			randTest.Run(t, Module, state.NewTestStateDB(t))
		})

	}

}

func BenchmarkCalculator(b *testing.B) {
	// Benchmark tests.
	for name, test := range tests {
		b.Run(name, func(b *testing.B) {
			test.Bench(b, Module, state.NewTestStateDB(b))
		})
	}
}
